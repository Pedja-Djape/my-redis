#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <poll.h>
#include <assert.h>
#include <iostream>
#include <vector>
#include <fcntl.h>
#include <unistd.h>

static void msg(const char *msg) {
    fprintf(stderr, "%s\n", msg);
}

static void die(const char *msg) {
    int err = errno;
    fprintf(stderr, "[%d] %s\n", err, msg);
    abort();
}

// max msg size
const size_t k_max_msg = 4096;

struct Conn {
    int fd = -1;
    // app's intention for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // buffered input and output
    std::vector<uint8_t> incoming; // data to be parsed by the application
    std::vector<uint8_t> outgoing; // responses generated by the application
};

/*
    Conn::want_read,want_write represents the fd list for the readiness api
    Conn::want_close tells the event loop to destroy the connection
    Conn::incoming buffers data from the socket for the protocol parser to work on
    Conn::outgoing buffers generated responses that are written to the socket
*/

// Make the listening socket non-blocking
static void fd_set_nb(int fd) {
    fcntl(fd, F_SETFL, fcntl(fd, F_GETFL, 0) | O_NONBLOCK);
}

static Conn *handle_accept(int fd) {
    struct sockaddr_in client_addr = {};
    socklen_t socklen = sizeof(client_addr);
    int connfd = accept(fd, (struct sockaddr *) &client_addr, &socklen);
    if (connfd < 0) {
        return NULL;
    }

    fd_set_nb(connfd);

    Conn *conn = new Conn();
    conn->fd = connfd;
    conn->want_read = true; // read the 1st request
    return conn;
}

static void buf_append(std::vector<uint8_t> &buf, const uint8_t *data, size_t len) {
    std::string data_str(data, data + len);
    buf.insert(buf.end(), data, data + len);
}

static void buf_consume(std::vector<uint8_t> &buf, size_t n) {
    buf.erase(buf.begin(), buf.begin() + n);
}

// process 1 request if there's enough data
static bool try_one_request(Conn *conn) {
    // 3. Try to parse the accumulated buffer
    // Protocol: message header
    if (conn->incoming.size() < 4) {
        return false;
    }
    uint32_t len = 0;
    memcpy(&len, conn->incoming.data(), 4);
    if (len > k_max_msg) {
        // protocol error
        conn->want_close = true;
        return false;
    }
    // Protocol: message body
    if (4 + len > conn->incoming.size()) { // whole message not in buffer
        return false; // want read
    }
    const uint8_t *request = &conn->incoming[4];
    // 4. Process the parsed message.
    printf("client says: len:%d data:%.*s\n", len, len < 100 ? len : 100, request);
    // generate the response (echo)
    buf_append(conn->outgoing, (const uint8_t *) &len, 4);
    buf_append(conn->outgoing, request, len);
    
    // 5. Remove the message from `Conn::incoming`
    buf_consume(conn->incoming, 4 + len);
    return true; // success
}


static void handle_read(Conn *conn) {
    // 1. Do a non blocking read
    uint8_t buf[64*1024];
    ssize_t rv = read(conn->fd, buf, sizeof(buf));
    // rv < 0 is an IO error and rv = 0 is EOF
    if (rv <= 0) {
        conn->want_close = true;
    }

    // 2. Add new data to the `Conn::incoming` buffer
    buf_append(conn->incoming, buf, (size_t)rv);
    // 3. Try to parse the accumulated buffer
    // 4. Process the parsed message
    // 5. Remove the message from `Conn::incoming`
    try_one_request(conn);

    // update the readiness intention
    if (conn->outgoing.size() > 0) {
        conn->want_read = false;
        conn->want_write = true;
    }
}

static void handle_write(Conn *conn) {
    assert(conn->outgoing.size() > 0);
    ssize_t rv = write(conn->fd, conn->outgoing.data(), conn->outgoing.size());
    // error handling
    if (rv < 0) {
        conn->want_close = true;
        return;
    }
    // remove written data from `outgoing`
    buf_consume(conn->outgoing, (size_t) rv);

    if (conn->outgoing.size() == 0) {
        conn->want_write = false;
        conn->want_read = true;
    }
}


int main() {
    // doesn't create the socket just yet
    // first param is for ipv4 and sockstream is for TCP
    int fd = socket(AF_INET, SOCK_STREAM, 0);
    if (fd < 0) {
        die("socket()");
    }

    // this is needed for most server applications
    int val = 1; 
    // setting socket options
    /*
        The effect of SO_REUSEADDR is important: if itâ€™s not set to 1,
        a server program cannot bind to the same IP:port it was using
        after a restart.
    */
    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val));

    // bind
    struct sockaddr_in addr = {};
    addr.sin_family = AF_INET;
    addr.sin_port = ntohs(1234);
    addr.sin_addr.s_addr = ntohl(0);    // wildcard address 0.0.0.0
    // this creates a mapping between the socket and an address on the network
    int rv = bind(fd, (const sockaddr *)&addr, sizeof(addr));
    if (rv) {
        die("bind()");
    }

    fd_set_nb(fd);
    // listen
    rv = listen(fd, SOMAXCONN); // listen on this address for incoming connections
    if (rv) {
        die("listen()");
    }

    // a map of all client connections, keyed by fd
    std::vector<Conn *> fd2conn;
    std::vector<struct pollfd> poll_args;
    while (true) {
        // prepare the arguements of the poll()
        poll_args.clear();
        // put the listening socket in the first position
        struct pollfd pfd = { fd, POLLIN, 0 };
        poll_args.push_back(pfd);
        // the rest are connection sockets
        for (Conn *conn : fd2conn) {
            if (!conn) {
                continue;
            }
            struct pollfd pfd = { conn->fd, POLLERR, 0 };
            // poll() flags from the applications intent
            if (conn->want_read) {
                pfd.events |= POLLIN;
            }
            if (conn->want_write) {
                pfd.events |= POLLOUT;
            }
            poll_args.push_back(pfd);
        }

        // wait for readiness
        int rv = poll(poll_args.data(), (nfds_t)poll_args.size(), -1);
        // if a process receives a unix signal during a blocking syscall, the syscall
        // is immediately returned with EINTR to give the process a chance to handle
        // the signal
        if (rv < 0 && errno == EINTR) {
            // since EINTR isnt an error the syscall should be retried
            continue;
        }
        if (rv < 0) {
            die("poll()");
        }

        // handle the listening socket
        if (poll_args[0].revents) {
            if (Conn *conn = handle_accept(fd)) {
                // put it into the map
                if (fd2conn.size() <= (size_t)conn->fd) {
                    fd2conn.resize(conn->fd + 1);
                }
                assert(!fd2conn[conn->fd]);
                fd2conn[conn->fd] = conn;
            }
        }

        // handle connection sockets
        for (size_t i = 1; i < poll_args.size(); ++i) {
            uint32_t ready = poll_args[i].revents;
            if (ready == 0) {
                continue;
            }
            Conn *conn = fd2conn[poll_args[i].fd];
            if (ready & POLLIN) {
                assert(conn->want_read);
                handle_read(conn);
            }
            if (ready & POLLOUT) {
                assert(conn->want_write);
                printf("Want to write for socket: %d. Conn: ", conn->fd);
                handle_write(conn);
            }
            if ((ready & POLLERR) || conn->want_close) {
                (void)close(conn->fd);
                fd2conn[conn->fd] = NULL;
                delete conn;
            }
        }   // for each connection sockets
    }   // the event loop
    return 0;
}
